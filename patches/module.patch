diff --git a/config.def.h b/config.def.h
index f9caa17..19e9d9a 100644
--- a/config.def.h
+++ b/config.def.h
@@ -1,3 +1,5 @@
+#include <X11/XF86keysym.h>
+
 /* Taken from https://github.com/djpohly/dwl/issues/466 */
 #define COLOR(hex)    { ((hex >> 24) & 0xFF) / 255.0f, \
                         ((hex >> 16) & 0xFF) / 255.0f, \
@@ -23,8 +25,9 @@ static const Rule rules[] = {
 	/* app_id     title       tags mask     isfloating  isfullscreen   monitor */
 	/* examples:
 	{ "Gimp",     NULL,       0,            1,           -1 },
-	*/
 	{ "firefox",  NULL,       1 << 8,       0,          0,              -1 },
+	*/
+    { NULL, "flameshot", 0, 0, 1, -1 }
 };
 
 /* layout(s) */
@@ -61,7 +64,7 @@ static const int repeat_delay = 600;
 static const int tap_to_click = 1;
 static const int tap_and_drag = 1;
 static const int drag_lock = 1;
-static const int natural_scrolling = 0;
+static const int natural_scrolling = @naturalscroll@;
 static const int disable_while_typing = 1;
 static const int left_handed = 0;
 static const int middle_button_emulation = 0;
@@ -112,9 +115,15 @@ static const enum libinput_config_tap_button_map button_map = LIBINPUT_CONFIG_TA
 #define SHCMD(cmd) { .v = (const char*[]){ "/bin/sh", "-c", cmd, NULL } }
 
 /* commands */
-static const char *termcmd[] = { "foot", NULL };
-static const char *menucmd[] = { "bemenu-run", NULL };
-static const char *quitcmd[] = {0};
+static const char *termcmd[] = { @termcmd@ };
+static const char *menucmd[] = { @menucmd@ };
+static const char *quitcmd[] = { @quitcmd@ };
+static const char *audiodowncmd[] = { @audiodowncmd@ };
+static const char *audioupcmd[] = { @audioupcmd@ };
+static const char *audiomutcmd[] = { @audiomutcmd@ };
+static const char *audioplaycmd[] = { @audioplaycmd@ };
+static const char *audioforwcmd[] = { @audiofrwcmd@ };
+static const char *audioprevcmd[] = { @audioprevcmd@ };
 
 static const Key keys[] = {
 	/* Note that Shift changes certain key codes: c -> C, 2 -> at, etc. */
@@ -142,6 +151,12 @@ static const Key keys[] = {
 	{ MODKEY,                    XKB_KEY_period,     focusmon,       {.i = WLR_DIRECTION_RIGHT} },
 	{ MODKEY|WLR_MODIFIER_SHIFT, XKB_KEY_less,       tagmon,         {.i = WLR_DIRECTION_LEFT} },
 	{ MODKEY|WLR_MODIFIER_SHIFT, XKB_KEY_greater,    tagmon,         {.i = WLR_DIRECTION_RIGHT} },
+    { 0,                         XF86XK_AudioLowerVolume,  spawn,  {.v = audiodowncmd } },
+    { 0,                         XF86XK_AudioRaiseVolume,  spawn,  {.v = audioupcmd } },
+    { 0,                         XF86XK_AudioMute,         spawn,  {.v = audiomutcmd } },
+    { 0,                         XF86XK_AudioPlay,         spawn,  {.v = audioplaycmd } },
+    { 0,                         XF86XK_AudioNext,         spawn,  {.v = audioforwcmd } },
+    { 0,                         XF86XK_AudioPrev,         spawn,  {.v = audioprevcmd } },
 	TAGKEYS(          XKB_KEY_1, XKB_KEY_exclam,                     0),
 	TAGKEYS(          XKB_KEY_2, XKB_KEY_at,                         1),
 	TAGKEYS(          XKB_KEY_3, XKB_KEY_numbersign,                 2),
diff --git a/dwl.c b/dwl.c
index c6afcf9..cb78357 100644
--- a/dwl.c
+++ b/dwl.c
@@ -2326,8 +2326,8 @@ setup(void)
 	 * Xcursor themes to source cursor images from and makes sure that cursor
 	 * images are available at all scale factors on the screen (necessary for
 	 * HiDPI support). Scaled cursors will be loaded with each output. */
-	cursor_mgr = wlr_xcursor_manager_create(NULL, 24);
-	setenv("XCURSOR_SIZE", "24", 1);
+	cursor_mgr = wlr_xcursor_manager_create(NULL, @cursorsize@);
+	setenv("XCURSOR_SIZE", "@cursorsize@", 1);
 
 	/*
 	 * wlr_cursor *only* displays an image on screen. It does not move around
